/***********************************************************************************************
 * @(#)Group.java
 * 
 * Version: 1.0
 * 
 * Date: 2014/09/03
 * 
 * Copyright (c) 2014 Thiago Alexandre Martins Monteiro.
 * 
 * All rights reserved. This program and the accompanying materials are made 
 * available under the terms of the GNU Public License v2.0 which accompanies 
 * this distribution, and is available at http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *    Thiago Alexandre Martins Monteiro - initial API and implementation
 ************************************************************************************************/

package app.models;

import jedi.db.models.CharField;
import jedi.db.models.Manager;
import jedi.db.models.ManyToManyField;
import jedi.db.models.Model;
import jedi.db.models.QuerySet;

/**
 * <h2>Classe que modela um grupo.</h2>
 * <h3>Código:</h3>
 * <pre>
 * <code class="java">
 * package app.models;
 * 
 * import jedi.db.models.CharField;
 * import jedi.db.models.Manager;
 * import jedi.db.models.ManyToManyField;
 * import jedi.db.models.Model;
 * import jedi.db.models.QuerySet;
 * 
 * public class Group extends Model {
 * 
 *     // Attributes
 *     private static final long serialVersionUID = 4512798759309714169L;
 *     
 *    {@literal @}CharField(max_length = 128)
 *     private String name;
 *    
 *    {@literal @}ManyToManyField(through = Membership.class)
 *    {@code private QuerySet<Person> members;}
 *     
 *     public static Manager objects = new Manager(Group.class);
 *     
 *     // Constructors     
 *     public Group() {}
 *   
 *     // Getters
 *     public String getName() {
 *         return name;
 *     }
 *     
 *     // Generated by Jedi ORM
 *    {@code public QuerySet<Membership> getMembershipSet() {
 *         return Membership.objects.getSet(Group.class, this.id);
 *     }}
 *     
 *     // Generated by Jedi ORM
 *    {@code public QuerySet<Person> getMembers() {
 *         members = new QuerySet<Person>();
 *         Person person = null;
 *         for (Membership membership : getMembershipSet()) {
 *             person = Person.objects.get("id", membership.getPerson().getId());
 *             members.add(person);
 *         }
 *         return members;
 *     }}
 *     
 *     // Setters     
 *     public void setName(String name) {
 *		   this.name = name;
 *     }
 *     
 *    {@code public void setMembers(QuerySet<Person> members) {
 *         this.members = members;
 *     }}
 * }
 * </code>
 * </pre>
 * 
 * @author Thiago Monteiro
 * @version 1.0
 * @since 1.0
 * 
 * @see java.lang.Long
 * @see java.lang.String
 * 
 * @see jedi.db.models.CharField
 * @see jedi.db.models.Manager
 * @see jedi.db.models.ManyToManyField
 * @see jedi.db.models.Model
 * @see jedi.db.models.QuerySet
 * 
 * @see app.models.Membership
 * @see app.models.Person
 */
public class Group extends Model {
	
	// Attributes
	
	/**
	 * Número de versão da classe.
	 * 
	 * @see java.lang.Long
	 */
	private static final long serialVersionUID = 4512798759309714169L;
	
	/**
	 * Nome do grupo.
	 * 
	 * @see java.lang.String
	 * 
	 * @see jedi.db.models.CharField
	 */
	@CharField(max_length = 128)
	private String name;
	
	/**
	 * Membros do grupo.
	 * 
	 * @see jedi.db.models.ManyToManyField
	 * @see jedi.db.models.QuerySet
	 * 
	 * @see app.models.Membership
	 * @see app.models.Person
	 */
	@ManyToManyField(through = Membership.class)
	private QuerySet<Person> members;
	
	/** 
	 * Gerenciador de consultas a objetos dessa classe persistidos 
	 * em banco de dados.
	 * 
	 * @see jedi.db.models.Manager
	 * 
	 * @see app.models.Group
	 */
	public static Manager objects = new Manager(Group.class);
	
	
	// Constructors
	
	/**
	 * Construtor padrão.
	 */
	public Group() {}
	
	// Getters

	/**
	 * Retorna o nome do grupo.
	 * 
	 * @return o nome do grupo
	 * 
	 * @see java.lang.String
	 */
	public String getName() {
		return name;
	}

	/**
	 * Define o nome do grupo.
	 * 
	 * @param name o nome do grupo
	 * 
	 * @see java.lang.String
	 */
	public void setName(String name) {
		this.name = name;
	}

	// Generated by Jedi ORM
	/**
	 * Retorna as adesões ao grupo.
	 * 
	 * @return as adesões ao grupo
	 * 
	 * @see jedi.db.models.QuerySet
	 * 
	 * @see app.models.Membership
	 */
	public QuerySet<Membership> getMembershipSet() {
		return Membership.objects.getSet(Group.class, this.id);
	}

	// Generated by Jedi ORM
	/**
	 * Retorna os membros do grupo.
	 * 
	 * @return os membros do grupo
	 * 
	 * @see jedi.db.models.QuerySet
	 * 
	 * @see app.models.Person
	 * @see app.models.Membership
	 */
	public QuerySet<Person> getMembers() {
		members = new QuerySet<Person>();
		Person person = null;
		for (Membership membership : getMembershipSet()) {
			person = Person.objects.get("id", membership.getPerson().getId());
			members.add(person);
		}
		return members;
	}
	
	/**
	 * Define os membros do grupo.
	 * 
	 * @param members os membros do grupo
	 * 
	 * @see jedi.db.models.QuerySet
	 * 
	 * @see app.models.Person
	 */
	public void setMembers(QuerySet<Person> members) {
		this.members = members;
	}
}
