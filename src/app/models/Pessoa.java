/***********************************************************************************************
 * @(#)Pessoa.java
 *
 * Version: 1.0
 *
 * Date: 2014/09/09
 *
 * Copyright (c) 2014 Thiago Alexandre Martins Monteiro.
 *
 * All rights reserved. This program and the accompanying materials are made 
 * available under the terms of the GNU Public License v2.0 which accompanies 
 * this distribution, and is available at http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 *
 * Contributors:
 *    Thiago Alexandre Martins Monteiro - initial API and implementation
 ************************************************************************************************/

package app.models;

import java.util.Date;

import jedi.db.models.BooleanField;
import jedi.db.models.CharField;
import jedi.db.models.DateField;
import jedi.db.models.EmailField;
import jedi.db.models.FloatField;
import jedi.db.models.IntegerField;
import jedi.db.models.Manager;
import jedi.db.models.Model;
import jedi.db.models.TextField;
import jedi.db.models.URLField;

/**
 * <h2>Classe que modela uma pessoa.</h2>
 * <h3>Código:</h3>
 * <pre>
 * <code class="java">
 * package app.models;
 *
 * import java.util.Date;
 *
 * import jedi.db.models.BooleanField;
 * import jedi.db.models.CharField;
 * import jedi.db.models.DateField;
 * import jedi.db.models.EmailField;
 * import jedi.db.models.FloatField;
 * import jedi.db.models.IntegerField;
 * import jedi.db.models.Manager;
 * import jedi.db.models.Model;
 * import jedi.db.models.TextField;
 * import jedi.db.models.URLField;
 *
 * public class Pessoa extends Model {
 *
 *     // Attributes
 *     private static final long serialVersionUID = 887615433470716542L;
 *
 *    {@literal @}CharField(max_length = 50, unique = true, comment = "Esse campo armazena o nome da pessoa.")
 *     protected String nome;
 *
 *    {@literal @}IntegerField
 *     protected int idade;
 *
 *    {@literal @}DateField(auto_now = true, auto_now_add = true, comment = "Data do aniversário")
 *     protected Date dataNascimento;
 *
 *    {@literal @}EmailField
 *     protected String email;
 *
 *    {@literal @}BooleanField(required = false)
 *     protected boolean admin;
 *
 *    {@literal @}TextField
 *     protected String observacao;
 *
 *    {@literal @}FloatField(comment = "Salário da pessoa", required = false)
 *     protected float salario;
 *
 *    {@literal @}URLField(required = false)
 *     protected String site;
 *
 *     public static Manager objects = new Manager(Pessoa.class);
 *
 *     // Constructors
 *     public Pessoa() {}
 *
 *     public Pessoa(int id, String nome, int idade) {
 *         this.id = id;
 *         this.nome = nome;
 *         this.idade = idade;
 *     }
 *
 *     public Pessoa(String nome, int idade) {
 *         this.nome = nome;
 *         this.idade = idade;
 *     }
 *
 *     public Pessoa(int id, String nome, int idade, Date dataNascimento) {
 *         this.id = id;
 *         this.nome = nome;
 *         this.idade = idade;
 *         this.dataNascimento = dataNascimento;
 *     }
 *
 *     // Getters
 *     public String getNome() {
 *         return nome;
 *     }
 *
 *     public int getIdade() {
 *         return idade;
 *     }
 *
 *     public Date getDataNascimento() {
 *         return dataNascimento;
 *     }
 *
 *     public String getEmail() {
 *         return email;
 *     }
 *
 *     public boolean isAdmin() {
 *         return admin;
 *     }
 *
 *     public String getObservacao() {
 *         return observacao;
 *     }
 *
 *     public float getSalario() {
 *         return salario;
 *     }
 *
 *     public String getSite() {
 *         return site;
 *     }
 *
 *     // Setters
 *     public void setNome(String nome) {
 *         this.nome = nome;
 *     }
 *
 *     public void setIdade(int idade) {
 *         this.idade = idade;
 *     }
 *
 *     public void setDataNascimento(Date dataNascimento) {
 *         this.dataNascimento = dataNascimento;
 *     }
 *
 *     public void setEmail(String email) {
 *         this.email = email;
 *     }
 *
 *     public void isAdmin(boolean admin) {
 *         this.admin = admin;
 *     }
 *
 *     public void setObservacao(String observacao) {
 *         this.observacao = observacao;
 *     }
 *
 *     public void setSalario(float salario) {
 *         this.salario = salario;
 *     }
 *
 *     public void setSite(String site) {
 *         this.site = site;
 *     }
 *
 *     // Generated by Jedi ORM
 *     public PessoaFisica getPessoaFisica() {
 *         return PessoaFisica.objects.get("pessoa_id", this.id);
 *     }
 * }
 * </code>
 * </pre>
 *
 * @author Thiago Monteiro
 * @version 1.0
 * @since 1.0
 *
 * @see java.lang.Long
 * @see java.lang.String
 *
 * @see java.util.Date
 *
 * @see jedi.db.models.BooleanField
 * @see jedi.db.models.CharField
 * @see jedi.db.models.DateField 
 * @see jedi.db.models.EmailField
 * @see jedi.db.models.FloatField
 * @see jedi.db.models.IntegerField
 * @see jedi.db.models.Manager
 * @see jedi.db.models.Model
 * @see jedi.db.models.TextField
 * @see jedi.db.models.URLField
 *
 * @see app.models.PessoaFisica
 */
public class Pessoa extends Model {

    // Attributes

    /**
     * Número de versão da classe.
     * 
     * @see java.lang.Long
     */
    private static final long serialVersionUID = 887615433470716542L;

    /**
     * Nome da pessoa.
     *
     * @see java.lang.String
     *
     * @see jedi.db.models.CharField
     */
    @CharField(max_length = 50, unique = true, comment = "Esse campo armazena o nome da pessoa.")
    protected String nome;

    /**
     * Idade da pessoa.
     *
     * @see java.lang.Integer
     *
     * @see jedi.db.models.IntegerField
     */
    @IntegerField
    protected int idade;

    /**
     * Data de nascimento da pessoa.
     *
     * @see java.util.Date
     *
     * @see jedi.db.models.DateField
     */
    @DateField(auto_now = true, auto_now_add = true, comment = "Data do aniversário")
    protected Date dataNascimento;

    /**
     * E-mail da pessoa.
     *
     * @see java.lang.String
     *
     * @see jedi.db.models.EmailField
     */
    @EmailField
    protected String email;

    /**
     * Perfil administrativo.
     * 
     * @see java.lang.Boolean
     * 
     * @see jedi.db.models.BooleanField 
     */
    @BooleanField(required = false)
    protected boolean admin;

    /**
     * Observação sobre a pessoa.
     *
     * @see java.lang.String
     *
     * @see jedi.db.models.TextField
     */
    @TextField
    protected String observacao;

    /**
     * Salário da pessoa.
     *
     * @see java.lang.Float
     *
     * @see jedi.db.models.FloatField
     */
    @FloatField(comment = "Salário da pessoa", required = false)
    protected float salario;

    /**
     * URL do site da pessoa.
     *
     * @see java.lang.String
     *
     * @see jedi.db.models.URLField
     */
    @URLField(required = false)
    protected String site;

    /**
     * Gerenciador de consultas a objetos dessa
     * classe persistidos em banco de dados.
     *
     * @see jedi.db.models.Manager
     */
    public static Manager objects = new Manager(Pessoa.class);

    // Constructors

    /**
     * Construtor padrão.
     */
    public Pessoa() {}

    /**
     * Construtor que recebe o id, o nome, a idade e o tipo de pessoa.
     *
     * @param id o id da pessoa
     * @param nome o nome da pessoa
     * @param idade a idade da pessoa
     *
     * @see java.lang.Integer
     * @see java.lang.String
     */
    public Pessoa(int id, String nome, int idade) {
        this.id = id;
        this.nome = nome;
        this.idade = idade;
    }

    /**
     * Construtor que recebe o nome e a idade da pessoa.
     *
     * @param nome o nome da pessoa
     * @param idade a idade da pessoa
     *
     * @see java.lang.Integer
     * @see java.lang.String
     */
    public Pessoa(String nome, int idade) {
        this.nome = nome;
        this.idade = idade;
    }

    /**
     * Construtor que recebe o id, o nome, a idade e a data de nascimento da pessoa.
     *
     * @param id o id da pessoa
     * @param nome o nome da pessoa
     * @param idade a idade da pessoa
     * @param dataNascimento a data de nascimento da pessoa
     *
     * @see java.lang.Integer
     * @see java.lang.String
     *
     * @see java.util.Date
     */
    public Pessoa(int id, String nome, int idade, Date dataNascimento) {
        this.id = id;
        this.nome = nome;
        this.idade = idade;
        this.dataNascimento = dataNascimento;
    }

    // Getters

    /**
     * Retorna o nome da pessoa.
     *
     * @return o nome da pessoa
     * 
     * @see java.lang.String
     */
    public String getNome() {
        return nome;
    }

    /**
     * Retorna a idade da pessoa.
     *
     * @return a idade da pessoa
     *
     * @see java.lang.Integer
     */
    public int getIdade() {
        return idade;
    }

    /**
     * Retorna a data de nascimento da pessoa.
     *
     * @return a data de nascimento da pessoa
     *
     * @see java.util.Date
     */
    public Date getDataNascimento() {
        return dataNascimento;
    }

    /**
     * Retorna o e-mail da pessoa.
     *
     * @return o e-mail da pessoa
     *
     * @see java.lang.String
     */
    public String getEmail() {
        return email;
    }

    /**
     * Retorna o perfil administrativo da pessoa.
     *
     * @return o perfil administrativo da pessoa
     *
     * @see java.lang.Boolean
     */
    public boolean isAdmin() {
        return admin;
    }

    /**
     * Retorna a observação sobre a pessoa.
     *
     * @return a observação sobre a pessoa
     *
     * @see java.lang.String
     */
    public String getObservacao() {
        return observacao;
    }

    /**
     * Retorna o salário da pessoa.
     *
     * @return o salário da pessoa
     *
     * @see java.lang.Float
     */
    public float getSalario() {
        return salario;
    }

    /**
     * Retorna o site da pessoa.
     *
     * @return o site da pessoa
     *
     * @see java.lang.String
     */
    public String getSite() {
        return site;
    }

    // Setters

    /**
     * Define o nome da pessoa.
     *
     * @param nome o nome da pessoa
     *
     * @see java.lang.String
     */
    public void setNome(String nome) {
        this.nome = nome;
    }

    /**
     * Define a idade da pessoa.
     *
     * @param idade a idade da pessoa
     *
     * @see java.lang.Integer
     */
    public void setIdade(int idade) {
        this.idade = idade;
    }

    /**
     * Define a data de nascimento da pessoa.
     *
     * @param dataNascimento a data de nascimento da pessoa
     *
     * @see java.util.Date
     */
    public void setDataNascimento(Date dataNascimento) {
        this.dataNascimento = dataNascimento;
    }

    /**
     * Define o e-mail da pessoa.
     *
     * @param email o e-mail da pessoa
     *
     * @see java.lang.String
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Define o perfil administrativo da pessoa.
     *
     * @param admin o perfil administrativo da pessoa
     *
     * @see java.lang.Boolean
     */
    public void isAdmin(boolean admin) {
        this.admin = admin;
    }

    /**
     * Define a observação sobre a pessoa.
     *
     * @param observacao a observação sobre a pessoa
     *
     * @see java.lang.String
     */
    public void setObservacao(String observacao) {
        this.observacao = observacao;
    }

    /**
     * Define o salário da pessoa.
     *
     * @param salario o salário da pessoa
     *
     * @see java.lang.Float
     */
    public void setSalario(float salario) {
        this.salario = salario;
    }

    /**
     * Define o site da pessoa.
     *
     * @param site o site da pessoa
     *
     * @see java.lang.String
     */
    public void setSite(String site) {
        this.site = site;
    }

    // Generated by Jedi ORM
    /**
     * Retorna a pessoa física associada a pessoa.
     *
     * @return a pessoa física associada a pessoa
     *
     * @see jedi.db.models.PessoaFisica
     */
    public PessoaFisica getPessoaFisica() {
        return PessoaFisica.objects.get("pessoa_id", this.id);
    }
}
