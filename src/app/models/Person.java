/***********************************************************************************************
 * @(#)Person.java
 *
 * Version: 1.0
 *
 * Date: 2014/09/09
 *
 * Copyright (c) 2014 Thiago Alexandre Martins Monteiro.
 *
 * All rights reserved. This program and the accompanying materials are made 
 * available under the terms of the GNU Public License v2.0 which accompanies 
 * this distribution, and is available at http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 *
 * Contributors:
 *    Thiago Alexandre Martins Monteiro - initial API and implementation
 ************************************************************************************************/

package app.models;

import jedi.db.models.CharField;
import jedi.db.models.Manager;
import jedi.db.models.Model;
import jedi.db.models.QuerySet;
import jedi.db.models.Table;

/**
 * <h2>Classe que modela uma pessoa.</h2>
 * <h3>Código:</h3>
 * <pre>
 * <code class="java">
 * package app.models;
 *
 * import jedi.db.models.CharField;
 * import jedi.db.models.Manager;
 * import jedi.db.models.Model;
 * import jedi.db.models.QuerySet;
 * import jedi.db.models.Table;
 *
 *{@literal @}Table(name = "people")
 * public class Person extends Model {
 *
 *     // Attributes
 *     private static final long serialVersionUID = -4040286187559266582L;
 *
 *    {@literal @}CharField(max_length = 128)
 *     private String name;
 *
 *     public static Manager objects = new Manager(Person.class);
 *
 *     // Getters
 *     public String getName() {
 *         return name;
 *     }
 *
 *     // Setters
 *     public void setName(String name) {
 *         this.name = name;
 *     }
 *
 *     // Generated by Jedi ORM
 *     public QuerySet<Membership> getMembershipSet() {
 *         return Membership.objects.getSet(Person.class, this.id);
 *     }
 *
 *     // Generated by Jedi ORM
 *    {@code public QuerySet<Group> getGroupSet() {
 *         QuerySet<Group> groups = new QuerySet<Group>();
 *         Group group = null;
 *         for (Membership membership : getMembershipSet()) {
 *             group = Group.objects.get("id", membership.getGroup().getId());
 *             group.getMembers();
 *             groups.add(group);
 *         }
 *         return groups;
 *     }}
 * }
 * </code>
 * </pre>
 * 
 * @author Thiago Monteiro
 * @version 1.0
 * @since 1.0
 * 
 * @see java.lang.Long
 * @see java.lang.String
 * 
 * @see jedi.db.models.CharField
 * @see jedi.db.models.Manager
 * @see jedi.db.models.Model
 * @see jedi.db.models.QuerySet
 * @see jedi.db.models.Table
 * 
 * @see app.models.Group
 * @see app.models.Membership 
 */
@Table(name = "people")
public class Person extends Model {

    // Attributes

    /**
     * Número de série da classe.
     *
     * @see java.lang.Long
     */
    private static final long serialVersionUID = -4040286187559266582L;

    /**
     * Nome da pessoa.
     *
     * @see java.lang.String
     *
     * @see jedi.db.models.CharField
     */
    @CharField(max_length = 128)
    private String name;

    /**
     * Gerenciador de consultas a objetos dessa 
     * classe persistidos em banco de dados.
     *
     * @see jedi.db.models.Manager
     */
    public static Manager objects = new Manager(Person.class);

    // Getters

    /**
     * Retorna o nome da pessoa.
     *
     * @return o nome da pessoa
     *
     * @see java.lang.String
     */
    public String getName() {
        return name;
    }

    // Setters

    /**
     * Define o nome da pessoa.
     *
     * @param name o nome da pessoa
     *
     * @see java.lang.String
     */
    public void setName(String name) {
        this.name = name;
    }

    // Generated by Jedi ORM
    /**
     * Retorna as adesões a grupos por parte da pessoa.
     *
     * @return as adesões a grupos por parte da pessoa
     *
     * @see jedi.db.models.QuerySet
     *
     * @see app.models.Membership
     * @see app.models.Person
     */
    public QuerySet<Membership> getMembershipSet() {
        return Membership.objects.getSet(Person.class, this.id);
    }

    // Generated by Jedi ORM
    /**
     * Retorna os grupos que a pessoa aderiu.
     *
     * @return os grupos que a pessoa aderiu
     *
     * @see jedi.db.models.QuerySet
     *
     * @see app.models.Group
     * @see app.models.Membership
     */
    public QuerySet<Group> getGroupSet() {
        QuerySet<Group> groups = new QuerySet<Group>();
        Group group = null;
        for (Membership membership : getMembershipSet()) {
            group = Group.objects.get("id", membership.getGroup().getId());
            group.getMembers();
            groups.add(group);
        }
        return groups;
    }
}
